
image: $CI_REGISTRY_IMAGE/node14-awscli-git-jq:latest

variables:
  SECRET_DETECTION_REPORT_FILE: gl-secret-detection-report.json

stages:
  - build-and-test
  - security-scan
  - secret-scan-eval

.base:
  script:
    - aws codeartifact login --domain ${CODEARTIFACT_DOMAIN_NAME} --domain-owner ${CODEARTIFACT_DOMAIN_OWNER} --repository ${CODEARTIFACT_REPO_NAME} --region ${REGION} --tool ${CODEARIFACT_PACKAGE_FORMAT}
    - npm config list
    - echo "Fetch the main branch"
    - git fetch origin main:refs/remotes/origin/main -a
    - echo "Install NPM packages in the common folder"
    - node common/scripts/install-run-rush.js install
    - node common/scripts/install-run-rush.js check
    - node common/scripts/install-run-rush.js rebuild --verbose
    - node common/scripts/install-run-rush.js test:only --verbose
    # Throw an error if the badges generated do not match what is already in each package README.md
    - node common/scripts/install-run-rush.js make-badges --ci
    - node common/scripts/install-run-rush.js common-coverage-report
    # Throw an error if the badges generated do not match what is already in the root README.md
    - node common/scripts/install-run-rush.js common-coverage-ci

build-and-test:
  extends: 
    - .base
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: on_success
  stage: build-and-test

include:
  - template: Security/Container-Scanning.gitlab-ci.yml
  - template: Jobs/SAST.gitlab-ci.yml
  - template: Jobs/Secret-Detection.gitlab-ci.yml
  - template: Jobs/SAST-IaC.latest.gitlab-ci.yml
  - template: Jobs/License-Scanning.gitlab-ci.yml

# Overrides for Security and Jobs templates to run during merge request
container_scanning:
  stage: security-scan
  rules: 
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  variables:
    DOCKER_IMAGE: $CI_REGISTRY_IMAGE/node14-awscli-git-jq:latest

license_scanning:
  stage: security-scan
  rules: 
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

sast:
  stage: security-scan

eslint-sast:
  rules: 
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

nodejs-scan-sast:
  rules: 
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

semgrep-sast:
  rules: 
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

.secret-analyzer:
  stage: security-scan
    
secret_detection:
  rules: 
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  artifacts:
    paths:
      # in the "parent" job this file is declared as a report artifact, but
      # we also need it as a regular artifact for the subsequent job
      - $SECRET_DETECTION_REPORT_FILE

iac-sast:
  stage: security-scan

kics-iac-sast:
  rules: 
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

## Fail on Secret
secret-scan-eval:
  stage: secret-scan-eval
  dependencies:
    - secret_detection
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  variables:
    # this job only requires the $SECRET_DETECTION_REPORT_FILE
    GIT_STRATEGY: none
  script:
    # check if '{ "vulnerabilities": [], ..' is empty in the report file if it exists
    - |
      if [ -f "$SECRET_DETECTION_REPORT_FILE" ]; then
        if [ "$(jq ".vulnerabilities | length" $SECRET_DETECTION_REPORT_FILE)" -gt 0 ]; then
          echo "Vulnerabilities detected. Please analyze the artifact $SECRET_DETECTION_REPORT_FILE produced by the 'secret-detection' job."
          exit 1
        fi
      else
        echo "Artifact $SECRET_DETECTION_REPORT_FILE does not exist. The 'secret-detection' job likely didn't create one. Hence, no evaluation can be performed."
      fi