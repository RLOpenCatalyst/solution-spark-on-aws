AWSTemplateFormatVersion: 2010-09-09

Description: Service-Workbench-on-AWS EC2-Stata-RL Version
Metadata:
  PartnerName: Relevance Lab
  PartnerURL: https://relevancelab.com

Parameters:
  Namespace:
    Type: String
    Description: An environment name that will be prefixed to resource names
  AmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Description: Amazon Machine Image for the EC2 instance
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  InstanceType:
    Type: String
    Description: EC2 instance type to launch
  KeyName:
    Type: String
    Description: Keypair name for SSH access
  AccessFromCIDRBlock:
    Type: String
    Description: The CIDR used to access the ec2 instances.
    Default: 0.0.0.0/0
  S3Mounts:
    Type: String
    Description: A JSON array of objects with name, bucket, and prefix properties used to mount data
  IamPolicyDocument:
    Type: String
    Description: The IAM policy to be associated with the launched workstation
  VPC:
    Description: The VPC in which the EC2 instance will reside
    Type: AWS::EC2::VPC::Id
  Subnet:
    Description: The VPC subnet in which the EC2 instance will reside
    Type: AWS::EC2::Subnet::Id
  ALBSecurityGroup:
    Description: Security Group Id of the ALB to which the EC2 instance traffic will be allowed from
    Type: AWS::EC2::SecurityGroup::Id
  ListenerArn:
    Description: ARN of the alb listener in which the rules will be created
    Type: String
  ListenerRulePriority:
    Description: Priority of the rule to be created
    Type: Number
  ApplicationUrl:
    Description: URL of the application. This will be used as the host header to forward to target group
    Type: String
  EnvironmentInstanceFiles:
    Type: String
    Description: >-
      An S3 URI (starting with "s3://") that specifies the location of files to be copied to
      the environment instance, including any bootstrap scripts
  EncryptionKeyArn:
    Type: String
    Description: The ARN of the KMS encryption Key used to encrypt data in the instance
  DatasetsBucketArn:
    Type: String
    Description: Name of the datasets bucket in the main account
  MainAccountId:
    Type: String
    Description: The Main Account ID where application is deployed
  MainAccountRegion:
    Type: String
    Description: The region of application deployment in main account
  MainAccountKeyArn:
    Type: String
    Description: The ARN of main account bucket encryption key

Conditions:
  IamPolicyEmpty: !Equals [!Ref IamPolicyDocument, '{}']

Resources:
  InstanceRolePermissionBoundary:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Permission boundary for EC2 instance role
      ManagedPolicyName: !Join ['-', [Ref: Namespace, 'ec2-stata-permission-boundary']]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:AbortMultipartUpload'
              - 's3:ListMultipartUploadParts'
              - 's3:PutObject'
              - 's3:GetObjectAcl'
              - 's3:PutObjectAcl'
            Resource:
              - !Join ['/', [Ref: DatasetsBucketArn, '*']]
              - !Join [':', ['arn:aws:s3', Ref: MainAccountRegion, Ref: MainAccountId, 'accesspoint/*']]
              - !Join [
                  ':',
                  ['arn:aws:s3', Ref: MainAccountRegion, Ref: MainAccountId, 'accesspoint/*/object/*']
                ]
          - Effect: Allow
            Action:
              - 's3:GetAccessPoint'
              - 's3:ListAccessPoints'
            Resource: '*' # These actions require wildcard resources
          - Effect: Allow
            Action:
              - 's3:ListBucket'
            Resource:
              - !Ref DatasetsBucketArn
              - !Join [':', ['arn:aws:s3', Ref: MainAccountRegion, Ref: MainAccountId, 'accesspoint/*']]
          - Effect: Allow
            Action:
              - 's3:ListBucket'
            Resource: !Sub
              - 'arn:aws:s3:::${S3Bucket}'
              - S3Bucket: !Select [2, !Split ['/', !Ref EnvironmentInstanceFiles]]
            Condition:
              StringLike:
                s3:prefix: !Sub
                  - '${S3Prefix}/*'
                  - S3Prefix: !Select [3, !Split ['/', !Ref EnvironmentInstanceFiles]]
          - Effect: Allow
            Action:
              - 's3:GetObject'
            Resource: !Sub
              - 'arn:aws:s3:::${S3Location}/*'
              # Remove "s3://" prefix from EnvironmentInstanceFiles
              - S3Location: !Select [1, !Split ['s3://', !Ref EnvironmentInstanceFiles]]
          - Effect: Allow
            Action:
              - 'kms:CreateGrant'
              - 'kms:CreateKey'
              - 'kms:DescribeKey'
              - 'kms:EnableKeyRotation'
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:GenerateDataKey'
              - 'kms:Get*'
              - 'kms:List*'
            Resource:
              - !Ref EncryptionKeyArn
              - !Ref MainAccountKeyArn
          - Effect: Allow
            Action:
              - 'sts:AssumeRole'
            Resource: 'arn:aws:iam::*:role/swb-*'
          - Effect: Allow
            Action:
              - 'ssm:*'
            Resource: '*'

  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ['-', [Ref: Namespace, 'ec2-stata-role']]
      Path: '/'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ec2.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - !If
          - IamPolicyEmpty
          - !Ref 'AWS::NoValue'
          - PolicyName: !Join ['-', [Ref: Namespace, 's3-studydata-policy']]
            PolicyDocument: !Ref IamPolicyDocument
        - PolicyName: !Join ['-', [Ref: Namespace, 's3-bootstrap-script-policy']]
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 's3:GetObject'
                Resource: !Sub
                  - 'arn:aws:s3:::${S3Location}/*'
                  # Remove "s3://" prefix from EnvironmentInstanceFiles
                  - S3Location: !Select [1, !Split ['s3://', !Ref EnvironmentInstanceFiles]]
              - Effect: 'Allow'
                Action: 's3:ListBucket'
                Resource: !Sub
                  - 'arn:${AWS::Partition}:s3:::${S3Bucket}'
                  - S3Bucket: !Select [2, !Split ['/', !Ref EnvironmentInstanceFiles]]
                Condition:
                  StringLike:
                    s3:prefix: !Sub
                      - '${S3Prefix}/*'
                      - S3Prefix: !Select [3, !Split ['/', !Ref EnvironmentInstanceFiles]]
              - Effect: Allow
                Action:
                  - 'kms:CreateGrant'
                  - 'kms:Get*'
                  - 'kms:List*'
                  - 'kms:Decrypt'
                  - 'kms:DescribeKey'
                  - 'kms:Encrypt'
                  - 'kms:GenerateDataKey'
                Resource:
                  - !Ref MainAccountKeyArn
        - PolicyName: param-store-access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'ssm:GetParameter'
                  - 'ssm:PutParameter'
                Resource: !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*'
      PermissionsBoundary: !Ref InstanceRolePermissionBoundary

  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: !Join ['-', [Ref: Namespace, 'ec2-stata-profile']]
      Path: '/'
      Roles:
        - Ref: IAMRole

  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: EC2 Stata workspace security group
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: !Ref AccessFromCIDRBlock
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AccessFromCIDRBlock
        - IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Join ['-', [Ref: Namespace, 'ec2-stata-sg']]
        - Key: Description
          Value: EC2 Stata workspace security group
      VpcId: !Ref VPC

  EC2Instance:
    Type: 'AWS::EC2::Instance'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - config1
            - config2
        config1:
          files:
            '/home/ec2-user/.config/autostart/stata.desktop':
              mode: '000644'
              owner: 'ec2-user'
              group: 'ec2-user'
              content: |
                [Desktop Entry]
                Type=Application
                Exec="/home/ec2-user/start_stata.sh"
                Hidden=false
                NoDisplay=false
                X-GNOME-Autostart-enabled=true
                Terminal=true
                Name=Stata
                Comment=Stata Desktop
            '/home/ec2-user/.config/autostart/studymount.desktop':
              mode: '000644'
              owner: 'ec2-user'
              group: 'ec2-user'
              content: |
                [Desktop Entry]
                Type=Application
                Exec="/home/ec2-user/mount_study.sh"
                Hidden=false
                NoDisplay=false
                X-GNOME-Autostart-enabled=true
                Terminal=true
                Name=Study-Mounting
                Comment=Study Mounting
            '/home/ec2-user/start_stata.sh':
              mode: '000755'
              owner: 'ec2-user'
              group: 'ec2-user'
              content: !Sub |
                #!/bin/sh
                set -x
                xhost +local:all
                # Adding sleep to wait for study mounting
                sleep 20 
                docker run -d --net=host -v /home/ec2-user/stata.lic:/usr/local/stata/stata.lic -v /home/ec2-user:/home/ec2-user -e DISPLAY=:1 relevancelab/stata:1.1.0

            '/home/ec2-user/mount_study.sh':
              mode: '000755'
              owner: 'ec2-user'
              group: 'ec2-user'
              content: !Sub |
                #!/bin/sh
                mount_s3.sh 2>&1 >> /home/ec2-user/mount_s3.log
            '/home/ec2-user/set_user_token.sh':
              content: !Sub |
                #!/bin/bash
                region=$(curl -s "http://169.254.169.254/latest/meta-data/placement/region")
                instance_id=$(curl -s "http://169.254.169.254/latest/meta-data/instance-id")
                session_id="swb-session"
                auth_token=`uuidgen`
                parameter_name="/stata/access-token/sc-environments/ec2-instance/$instance_id"
                aws ssm put-parameter --name "$parameter_name" --type "String" --value '{"auth_token":"'$auth_token'","session_id":"'$session_id'"}' --region $region --overwrite
                echo "User token set successfully"
              mode: '000755'
              owner: 'ec2-user'
              group: 'ec2-user'
            '/home/ec2-user/supervisor/supervisord.conf':
              mode: '000644'
              owner: 'ec2-user'
              group: 'ec2-user'
              content: |
                [unix_http_server]
                file=/home/ec2-user/supervisor/supervisor.sock   ; the path to the socket file

                [supervisord]
                logfile=/home/ec2-user/supervisor/supervisord.log ; main log file; default $CWD/supervisord.log
                logfile_maxbytes=50MB                  ; max main logfile bytes b4 rotation; default 50MB
                logfile_backups=10                     ; # of main logfile backups; 0 means none, default 10
                loglevel=info                          ; log level; default info; others: debug,warn,trace
                pidfile=/home/ec2-user/supervisor/supervisord.pid ; supervisord pidfile; default supervisord.pid
                nodaemon=false                         ; start in foreground if true; default false
                minfds=1024                            ; min. avail startup file descriptors; default 1024
                minprocs=200                           ; min. avail process descriptors;default 200

                [rpcinterface:supervisor]
                supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

                [supervisorctl]
                serverurl=unix:///home/ec2-user/supervisor/supervisor.sock ; use a unix:// URL  for a unix socket

                [program:dcv-simple-ext-auth]
                command=docker run -p 8445:8445 -e PORT=8445 -e PARAMNAMEPREFIX=/stata/access-token/sc-environments/ec2-instance/ relevancelab/nice-dcv-auth-svc:1.0.0  ; the program (relative uses PATH, can take args)
                directory=/home/ec2-user                                                                                                                                 ; directory to cwd to before exec (def no cwd)
                user=ec2-user                                                                                                                                            ; setuid to this UNIX account to run the program
                redirect_stderr=true                                                                                                                                     ; redirect proc stderr to stdout (default false)
                stdout_logfile=/home/ec2-user/supervisor/cust_auth.log
            '/home/ec2-user/supervisor/supervisord.log':
              content: "\n"
              mode: '000664'
              owner: 'ec2-user'
              group: 'ec2-user'
            '/home/ec2-user/supervisor/cust_auth.log':
              content: "\n"
              mode: '000664'
              owner: 'ec2-user'
              group: 'ec2-user'
            '/home/ec2-user/disable_lock.sh':
              content: !Sub |
                #!/bin/bash
                gsettings set org.gnome.desktop.lockdown disable-lock-screen 'true'
                echo "Lock disabled successfully"
              mode: '000755'
              owner: 'ec2-user'
              group: 'ec2-user'
        config2:
          commands:
            01_start_ext_auth:
              cwd: '/home/ec2-user/supervisor'
              command: 'sudo /usr/local/bin/supervisord'
            02_set_user_token:
              cwd: '/home/ec2-user'
              command: '/home/ec2-user/set_user_token.sh'
            03_create_application_desktop:
              cwd: '/home/ec2-user'
              command: 'sudo -u ec2-user cp /home/ec2-user/.config/autostart/stata.desktop /home/ec2-user/Desktop'
    Properties:
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyName
      ImageId: !Ref 'AmiId'
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 32
            Encrypted: true
            KmsKeyId: !Ref EncryptionKeyArn
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          GroupSet:
            - !Ref SecurityGroup
          SubnetId: !Ref Subnet
      Tags:
        - Key: Name
          Value: !Join ['-', [Ref: Namespace, 'ec2-stata']]
        - Key: Description
          Value: EC2 Stata workspace instance
      UserData:
        Fn::Base64: !Sub |
          #!/usr/bin/env bash
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          # trap '/opt/aws/bin/cfn-signal --exit-code 1 --resource EC2Instance --region ${AWS::Region} --stack ${AWS::StackName}' ERR

          # Install supervisor and start on boot
          sudo pip3 install supervisor crudini

          # Route auth request to external authenticator and restart dcv
          sudo /usr/local/bin/crudini --set /etc/dcv/dcv.conf security auth-token-verifier \"http://127.0.0.1:8445\"
          sudo systemctl restart dcvserver

          # Set password for ec2-user
          # instance_id=$(curl -s "http://169.254.169.254/latest/meta-data/instance-id")
          # echo "ec2-user:$instance_id" | /usr/sbin/chpasswd

          # Create dcv session start script
          cat << EOF > /usr/local/bin/start-dcv-session
          dcv create-session swb-session --name swb-session --user ec2-user --owner ec2-user
          EOF

          # Create dcv session
          sudo chown root: "/usr/local/bin/start-dcv-session"
          sudo chmod 775 "/usr/local/bin/start-dcv-session"
          sudo sh "/usr/local/bin/start-dcv-session"

          # Pull docker image
          docker pull relevancelab/nice-dcv-auth-svc:1.0.0          
          sudo docker pull relevancelab/stata:1.1.0

          # Run init script to create files
          /opt/aws/bin/cfn-init --verbose --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}

          # Add command to start on reboot
          sudo crontab -l 2>/dev/null > "/tmp/crontab"
          echo '@reboot cd /home/ec2-user/supervisor && sudo /usr/local/bin/supervisord 2>&1 >> /var/log/ext-auth-start.log' >> "/tmp/crontab"
          echo '@reboot /usr/local/bin/start-dcv-session 2>&1 >> /var/log/start-dcv-session.log' >> "/tmp/crontab"
          echo '@reboot /home/ec2-user/set_user_token.sh 2>&1 >> /var/log/set_user_token.log' >> "/tmp/crontab"
          sudo crontab "/tmp/crontab"

          # Restart DCV session to start stata
          #dcv close-session swb-session
          #sudo sh "/usr/local/bin/start-dcv-session"

          # Remove password and lock for ec2-user
          sudo passwd -l ec2-user
          sudo dcv create-session lock-session --name lock-session --user ec2-user --owner ec2-user --init /home/ec2-user/disable_lock.sh

          # Download and execute bootstrap script
          aws s3 cp --region "${AWS::Region}" "${EnvironmentInstanceFiles}/get_bootstrap.sh" "/tmp"
          chmod 500 "/tmp/get_bootstrap.sh"
          /tmp/get_bootstrap.sh "${EnvironmentInstanceFiles}" '${S3Mounts}' "${AWS::Region}"

          # Copy environment instance files needed for the workspace
          aws s3 cp --region "${AWS::Region}" "${EnvironmentInstanceFiles}/stata/stata.lic" "/tmp/stata/"
          mv /tmp/stata/stata.lic /home/ec2-user/stata.lic

          # Restart DCV session to start stata
          dcv close-session swb-session
          sudo sh "/usr/local/bin/start-dcv-session"

          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}

  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200,301,302'
      Name: !Join ['-', [Ref: Namespace, 'tg']]
      Port: 443
      Protocol: HTTPS
      Targets:
        - Id:
            Ref: EC2Instance
          Port: 8443
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'VPC'

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref EC2TargetGroup
      Conditions:
        - Field: host-header
          Values:
            - !Ref ApplicationUrl
      ListenerArn: !Ref ListenerArn
      Priority: !Ref ListenerRulePriority

Outputs:
  StataInstanceArn:
    Description: ARN of the EC2 workspace instance
    Value: !Sub
      - arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/${INSTANCE_ID}
      - INSTANCE_ID: !Ref EC2Instance

  StataInstanceId:
    Description: Instance Id for the EC2 workspace instance
    Value: !Ref EC2Instance

  StataInstanceRoleArn:
    Description: IAM role assumed by the EC2 workspace instance
    Value: !GetAtt IAMRole.Arn
